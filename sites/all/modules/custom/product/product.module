<?php

define('PRODUCT_PATH', 'product');

function product_entity_info() {
    $return = array(
        'product' => array(
            'label' => t('Product'),
            'entity class' => 'Product',
            'controller class' => 'ProductController',
            'base table' => 'product',
            'fieldable' => TRUE,
            'load hook' => 'product_load',
            // Чтобы иметь интеграцию с Views из коробки мы должны указать этот ключ
            // и наш модуль не должен  иметь реализованный
            // hook_views_data() в виде smessage_views_data().
            'module' => 'product',
            'entity keys' => array(
                'id' => 'id',
                'label' => 'name'
            ),
            'bundle keys' => array(
                'bundle' => 'type',
            ),
            'bundles' => array(),
            'view modes' => array(
                'full' => array(
                    'label' => t('Full'),
                    'custom settings' => FALSE,
                ),
                'admin' => array(
                    'label' => t('Admin'),
                    'custom settings' => TRUE,
                ),
            ),
            'label callback' => 'entity_class_label',
            'uri callback' => 'entity_class_uri',
            /*'bundles' => array(
                // Ключ 'product' - машинное название типа.
                'product' => array(
                    'label' => t('Product'), // Человеко-понятное название типа.
                    'admin' => array(
                        'path' => 'admin/config/content/products', // Путь, по которому доступна админка.
                        //'access arguments' => array('configure products settings'), // Права доступа в админку.
                    ),
                ),
            ),*/
            // 'access callback' => 'product_access',
            //'access arguments' => array('administer site configuration'),
            //'access callback'  => TRUE,
           /* 'admin ui' => array(
                'path' => 'admin/config/product',
                'file' => 'product.ui.inc',
                'controller class' => 'ProductContentUIController',
            ),*/
        )
    );
    $return['product_type'] = array(
        'label' => t('Product Type'),
        'entity class' => 'ProductType',
        'controller class' => 'ProductTypeController',
        'base table' => 'type_product',
        'fieldable' => FALSE,
        'bundle of' => 'product',
        'exportable' => TRUE,
        'entity keys' => array(
            'id' => 'id',
            //'name' => 'name',
            'label' => 'name'
        ),
        'module' => 'product',
        'admin ui' => array(
            'path' => 'admin/structure/product_types',
            'file' => 'product.admin.inc',
            'controller class' => 'ProductTypeUIController',
        ),
        // Enable the entity API's admin UI.
       /* 'admin ui' => array(
            'path' => 'admin/structure/product_types',
            'file' => 'product.admin.inc',
            'controller class' => 'ProductTypeUIController',
        ),*/
        //'access callback' => 'example_task_type_access',
    );
    return $return;
}


function product_menu() {
    /*$items['admin/config/product/add'] = array(
        'title' => 'Add product',
        'page callback' => 'product_admin_page_add',
        'access callback' => TRUE,
        //'access callback' => 'product_access',
        //'access arguments' => array('create', 'product'),
        'file' => 'product.admin.inc',
        'type' => MENU_LOCAL_ACTION,
        'tab_parent' => 'product',
        'tab_root' => 'product',
    );*/
    $items['product/%product'] = array(
        'title callback' => 'entity_label',
        'title arguments' => array('product', 1),
        'page callback' => 'product_page_view',
        'page arguments' => array(1),
        'access callback' => TRUE,
        //'access callback' => 'product_access',
        //'access arguments' => array('view', 'product', 1),
        'file' => 'product.pages.inc',
    );
    $items['product_type/%product_type'] = array(
        'title callback' => 'entity_label',
        'title arguments' => array('product_type', 1),
        'page callback' => 'product_type_page_view',
        'page arguments' => array(1),
        'access callback' => TRUE,
        //'access callback' => 'product_access',
        //'access arguments' => array('view', 'product', 1),
        'file' => 'product_type.pages.inc',
    );

    /*$items['admin/config/product'] = array(
        'title' => 'Product',
        'description' => 'Administration tools.',
        'page callback' => 'system_admin_menu_block_page',
        'access arguments' => array('access administration pages'),
        'file' => 'system.admin.inc',
        'file path' => drupal_get_path('module', 'system'),
    );*/

    $items['products/view'] = array(
        /*'title' => 'Products',
        'description' => 'Configure general product settings, fields, and displays.',
        'page callback' => 'product_admin',
        'access arguments' => array('administer products'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'product.admin.inc',*/
        //'title callback' => 'entity_label',
        //'title arguments' => array('product', 0),
        'page callback' => 'products_page_view',
        'access callback' => TRUE,
        //'page arguments' => array($task_uri_argument_position),
        //'access callback' => 'entity_access',
        //'access arguments' => array('view', 'example_task', $task_uri_argument_position),
        'file' => 'product.pages.inc',
    );
    /*$items['admin/config/products/view'] = array(
        'title' => 'Products',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => -10,
    );*/
    $items['product/%product/view'] = array(
        'title' => 'View',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 0,
    );
    $items['product/%product/edit'] = array(
        'title' => 'Edit',
        'page callback' => 'product_page_edit',
        'page arguments' => array(1),
        'access callback' => 'product_access',
        'access arguments' => array('update', 'product', 1),
        'weight' => 1,
        'type' => MENU_LOCAL_TASK,
        'file' => 'product.pages.inc',
    );
    $items['product/%product/delete'] = array(
        'title' => 'Delete',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('product_delete_confirm', 1),
        'access callback' => 'product_access',
        'access arguments' => array('delete', 'product', 1),
        'file' => 'product.pages.inc',
    );
    foreach (product_types() as $type => $info) {
        $items['product/add/' . $type] = array(
            'title' => 'Add product',
            'page callback' => 'product_add',
            'page arguments' => array(2),
            'access callback' => TRUE,
            //'access callback' => 'entity_access',
            //'access arguments' => array('create', 'example_task', $type),
            'file' => 'product.admin.inc',
        );
    }
    /*$items['admin/structure/product_types/%product_type/delete'] = array(
        'title' => 'Delete',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('product_type_form_delete_confirm', 4),
        //'access arguments' => array('administer example_task types'),
        'weight' => 1,
        'type' => MENU_NORMAL_ITEM,
        'file' => 'product.admin.inc',
    );*/
    return $items;
}

/*function product_uri($product) {
    return array(
        'path' => 'product/' . $product->id,
    );
}*/

function product_load($product_id, $reset = FALSE) {
    $products = product_load_multiple(array($product_id), array(), $reset);
    return $products ? reset($products) : FALSE;
}

function product_load_multiple($product_ids = array(), $conditions = array(), $reset = FALSE) {
    return entity_load('product', $product_ids, $conditions, $reset);
}

function product_save($product) {
    entity_save('product', $product);
}

function product_delete($product) {
    entity_delete('product', entity_id('product', $product));
}

function product_delete_multiple($product_ids) {
    entity_delete_multiple('product', $product_ids);
}

function product_entity_property_info_alter(&$info) {
    $properties = &$info['product']['properties'];
    $properties['created'] = array(
        'label' => t("Date created"),
        'type' => 'date',
        'description' => t("The date the node was posted."),
        'setter callback' => 'entity_property_verbatim_set',
        'setter permission' => 'administer nodes',
        'schema field' => 'created',
    );
    $properties['changed'] = array(
        'label' => t("Date changed"),
        'type' => 'date',
        'schema field' => 'changed',
        'description' => t("The date the node was most recently updated."),
    );
    $properties['uid'] = array(
        'label' => t("Author"),
        'type' => 'user',
        'description' => t("The author of the task."),
        'setter callback' => 'entity_property_verbatim_set',
        'setter permission' => 'administer example_task entities',
        'required' => TRUE,
        'schema field' => 'uid',
    );
}

function template_preprocess_product(&$variables) {
    $variables['view_mode'] = $variables['elements']['#view_mode'];
    $variables['product'] = $variables['elements']['#product'];
    $product = $variables['product'];
    $variables['date'] = format_date($product->created);
    $variables['name'] = theme('username', array('account' => $product));
    $uri = product_uri($product);
    $variables['product_url']  = url($uri['path']);
    $variables['title'] = check_plain($product->title);
    $variables['page'] = $variables['view_mode'] == 'full';
    $variables = array_merge((array) $product, $variables);
    $variables += array('content' => array());
    foreach (element_children($variables['elements']) as $key) {
        $variables['content'][$key] = $variables['elements'][$key];
    }
    // Делаем поля доступными в качестве переменных для соответствующего языка.
    field_attach_preprocess('product', $product, $variables['content'], $variables);
    $variables['submitted'] = t('Submitted by !username on !datetime', array('!username' => $variables['name'], '!datetime' => $variables['date']));
    $variables['title_attributes_array']['class'][] = 'product-title';
}

/*function product_type_access($op, $entity = NULL) {
    return user_access('administer example_task types');
}*/

/**
 * Load task Type.
 */
function product_type_load($task_type) {
    return product_types($task_type);
}

/**
 * List of task Types.
 */
function product_types($type_name = NULL) {
    $types = entity_load_multiple_by_name('product_type', isset($type_name) ? array($type_name) : FALSE);
    return isset($type_name) ? reset($types) : $types;
}

/**
 * Save task type entity.
 */
function product_type_save($task_type) {
    entity_save('product_type', $task_type);
}

/**
 * Delete single case type.
 */
function product_type_delete($task_type) {
    entity_delete('product_type', entity_id('product_type' ,$task_type));
}

/**
 * Delete multiple case types.
 */
function product_type_delete_multiple($task_type_ids) {
    entity_delete_multiple('product_type', $task_type_ids);
}

/**
 * Implements hook_views_api().
 */
function product_views_api() {
    return array(
        'api' => 3,
        'path' => drupal_get_path('module', 'product'),
    );
}
