<?php

define('PRODUCT_PATH', 'product');

function product_entity_info() {
    return array(
        'product' => array(
            'label' => t('Product'),
            'entity class' => 'Product',
            'controller class' => 'ProductController',
           /* 'entity class' => 'Entity', // Класс сущности.
            'controller class' => 'EntityAPIController',
            'uri callback' => 'product_uri',*/
            'base table' => 'product',
            //'fieldable' => TRUE,
            // Чтобы иметь интеграцию с Views из коробки мы должны указать этот ключ
            // и наш модуль не должен  иметь реализованный
            // hook_views_data() в виде smessage_views_data().
            //'module' => 'products',
            'entity keys' => array(
                'id' => 'id',
                'label' => 'name'
            ),
            'bundles' => array(),
            /*'bundles' => array(
                // Ключ 'product' - машинное название типа.
                'product' => array(
                    'label' => t('Product'), // Человеко-понятное название типа.
                    'admin' => array(
                        'path' => 'admin/config/content/products', // Путь, по которому доступна админка.
                        //'access arguments' => array('configure products settings'), // Права доступа в админку.
                    ),
                ),
            ),*/
            // Чтобы код почти прямым путём пришёл к SMessage::defaultLabel().
            //'label callback' => 'entity_class_label',
            // Чтобы код почти прямым путём пришёл к SMessage::defaultUri().
            //'uri callback' => 'entity_class_uri',
            // Здесь мы будем проверять доступ текущего пользователя ко всем
            // возможным операциям с сообщениями, от создания до просмотра.
            // 'access callback' => 'product_access',
            //'access arguments' => array('administer site configuration'),
            //'access callback'  => TRUE,
            // У нас нет типов и настраиваемых полей.
            //'bundles' => array(),
            'admin ui' => array(
                // Лучше явно указать заменитель, это может быть полезным во
                // многих случаях.
                //'menu wildcard' => '%product',
                // В нашей реализации SMessageContentUIController->hook_menu()
                // мы легко получим этот путь и будем лепить к нему нужные адреса.
                'path' => PRODUCT_PATH,
                'controller class' => 'ProductContentUIController',
            ),
            'view modes' => array(
                'full' => array(
                    'label' => t('Full'),
                    'custom settings' => TRUE,
                ),
                'admin' => array(
                    'label' => t('Admin'),
                    'custom settings' => TRUE,
                ),
            ),
        )
    );
}

function product_uri($product) {
    return array(
        'path' => 'product/' . $product->id,
    );
}

function product_load($product_id) {
    $products = product_load_multiple(array($product_id), array());
    return $products ? reset($products) : FALSE;
}

function product_load_multiple($product_ids = array(), $conditions = array(), $reset = FALSE) {
    return entity_load('product', $product_ids, $conditions, $reset);
}

function product_entity_load($entities, $type) {
    // По умолчанию, сущность имеет только uid пользователя, который создал ее,
    // добавляем этот код, чтобы получить еще и имя пользователя.
    if ($type == 'product') {
        foreach ($entities as $entity) {
            if ($entity->type_id) {
                /*if ($account = user_load($entity->type_id)) {
                    $entity->name = $account->name;
                }*/
                $entity->type_name = 'type';
            } else {
                $entity->type_name = variable_get('anonymous', t('Anonymous'));
            }
        }
    }
}

function product_delete($product_id) {
    product_delete_multiple(array($product_id));
}

function product_delete_multiple($product_ids) {
    entity_delete_multiple('product', $product_ids);
}

function product_theme() {
    return array(
        'product' => array(
            'render element' => 'elements',
            'template' => 'templates/product',
        ),
    );
}

function template_preprocess_product(&$variables) {
    $variables['view_mode'] = $variables['elements']['#view_mode'];
    $variables['product'] = $variables['elements']['#product'];
    $product = $variables['product'];
    $variables['date'] = format_date($product->created);
    $variables['name'] = theme('username', array('account' => $product));
    $uri = product_uri($product);
    $variables['product_url']  = url($uri['path']);
    $variables['title'] = check_plain($product->title);
    $variables['page'] = $variables['view_mode'] == 'full';
    $variables = array_merge((array) $product, $variables);
    $variables += array('content' => array());
    foreach (element_children($variables['elements']) as $key) {
        $variables['content'][$key] = $variables['elements'][$key];
    }
    // Делаем поля доступными в качестве переменных для соответствующего языка.
    field_attach_preprocess('product', $product, $variables['content'], $variables);
    $variables['submitted'] = t('Submitted by !username on !datetime', array('!username' => $variables['name'], '!datetime' => $variables['date']));
    $variables['title_attributes_array']['class'][] = 'product-title';
 /*   if ($variables['status'] == PRODUCT_PENDING) {
        $variables['classes_array'][] = 'product-pending';
    }
    elseif ($variables['status'] == PRODUCT_COMPLETED) {
        $variables['classes_array'][] = 'product-completed';
    }
    elseif ($variables['status'] == PRODUCT_CANCELED) {
        $variables['classes_array'][] = 'product-canceled';
    }*/
}

function product_view_multiple($products, $view_mode = 'full', $langcode = NULL) {
    // Подготавливаем данные для отображения.
    field_attach_prepare_view('product', $products, $view_mode, $langcode);
    entity_prepare_view('product', $products, $langcode);
    $build = array();
    $weight = 0;
    foreach ($products as $product) {
        $build['products'][$product->id] = product_view($product, $view_mode, $langcode);
        $build['products'][$product->id]['#weight'] = $weight++;
    }
    $build['products']['#sorted'] = TRUE;
    return $build;
}

function product_view($product, $view_mode = 'full', $langcode = NULL) {
    if (!isset($langcode)) {
        global $language;
        $langcode = $language->language;
    }
    // Заполняем $product->content данными в виде рендерного массива.
    product_build_content($product, $view_mode, $langcode);
    $build = $product->content;
    // Скрываем данные, чтобы избежать их дублирования при выводе $product->content.
    unset($product->content);
    $build += array(
        '#theme' => 'product',
        '#product' => $product,
        '#view_mode' => $view_mode,
        '#language' => $langcode,
    );
    return $build;
}

function product_build_content($product, $view_mode = 'full', $langcode = NULL) {
    if (!isset($langcode)) {
        global $language;
        $langcode = $language->language;
    }
    // Удаляем существующий конент, если существует.
    $product->content = array();
    field_attach_prepare_view('product', array($product->id => $product), $view_mode, $langcode);
    entity_prepare_view('product', array($product->id => $product), $langcode);
    $product->content += field_attach_view('product', $product, $view_mode, $langcode);
    $product->content += array('#view_mode' => $view_mode);
    $product->content['links'] = array(
        '#theme' => 'links__product',
        '#pre_render' => array('drupal_pre_render_links'),
        '#attributes' => array('class' => array('links')),
    );
}

function product_menu() {
    // Top level "Product" container.
    $items['admin/config/product'] = array(
        'title' => 'Product',
        'description' => 'Administration tools.',
        'page callback' => 'system_admin_menu_block_page',
        'access arguments' => array('access administration pages'),
        'file' => 'system.admin.inc',
        'file path' => drupal_get_path('module', 'system'),
    );
    $items['admin/config/product/products'] = array(
        'title' => 'Products',
        'description' => 'Configure general product settings, fields, and displays.',
        'page callback' => 'product_admin_products',
        'access arguments' => array('administer products'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'product.admin.inc',
    );
    $items['admin/config/product/products/list'] = array(
        'title' => 'Products',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => -10,
    );
    // Страница создания продукта.
    $items['product/add'] = array(
        'title' => 'Add product',
        'page callback' => 'product_page_add',
        'access callback' => TRUE,
        //'access callback' => 'product_access',
        'access arguments' => array('create', 'product'),
        'file' => 'product.pages.inc',
    );
    // Страница просмотра продукта.
    $items['product/%product'] = array(
        'title callback' => 'product_page_title',
        'title arguments' => array(1),
        'page callback' => 'product_page_view',
        'page arguments' => array(1),
        'access callback' => 'product_access',
        'access arguments' => array('view', 'product', 1),
        'file' => 'product.pages.inc',
    );
    $items['product/%product/view'] = array(
        'title' => 'View',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 0,
    );
    // Страница редактирования продукта.
    $items['product/%product/edit'] = array(
        'title' => 'Edit',
        'page callback' => 'product_page_edit',
        'page arguments' => array(1),
        'access callback' => 'product_access',
        'access arguments' => array('update', 'product', 1),
        'weight' => 1,
        'type' => MENU_LOCAL_TASK,
        'file' => 'product.pages.inc',
    );
    // Страница удаления продукта.
    $items['product/%product/delete'] = array(
        'title' => 'Delete',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('product_delete_confirm', 1),
        'access callback' => 'product_access',
        'access arguments' => array('delete', 'product', 1),
        'file' => 'product.pages.inc',
    );
    return $items;
}

function product_status_get_title($id = NULL) {
}